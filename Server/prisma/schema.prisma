// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  name      String
  username  String      @unique
  password  String
  isGroup   Boolean
  avatar    String
  UserGroup UserGroup[]
  Message   Message[]
  Member    Member[]
}

model UserGroup {
  id         String    @id @default(uuid()) @db.Uuid
  name       String?
  code       String?
  isGroup    Boolean
  created_at DateTime  @default(now())
  admin      User?     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId    Int
  Message    Message[]
  Member     Member[]
  avatar     String?
}

model Member {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroupId String    @db.Uuid
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  name        String
  avatar      String?
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  timestamp DateTime  @default(now())
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   String    @db.Uuid
  group     UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  avatar    String?
}
